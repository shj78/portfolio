SELECT USER
FROM DUAL;
--==>> PMJ

/* --------------------------■■■ 목차 ■■■---------------------------------

[ 성적 처리 시스템 구현 요구 분석 ]


CASE1. 관리자 계정 로그인

--○ 교수자 관리
1. 교수자 등록 → PRC_PROFESSOR_INSERT
2. 교수자 수정 → PRC_PROFESSOR_UPDATE
3. 교수자 삭제 → PRC_PROFESSOR_DELETE
4. 교수자 정보 출력 → VIEW_PROFESSOR
(교수자 명, 배정 과목 명, 과목 기간, 교재 명, 강의실, 강의 진행 여부)

--○ 과정 관리
1. 과정 등록 → PRC_OP_COURSE_INSERT
2. 과정 수정 → PRC_OP_COURSE_UPDATE
3. 과정 삭제 → PRC_OP_COURSE_DELETE
4. 과정 출력 → ADMIN_OP_COURSE_VIEW
(과정명, 강의실, 과목명, 과목기간, 교재명, 교수자명)

--○ 과목 관리
1. 과목 등록 → PRC_OP_SUBJECT_INSERT
2. 과목 수정 →  PRC_OP_SUBJECT_UPDATE
3. 과목 삭제 →  PRC_OP_SUBJECT_DELETE
4. 과목 출력 →  ADMIN_SUBJECT_VIEW
(과정명, 강의실, 과목명, 과목기간, 교재명, 교수자명)

--○ 학생 관리
1. 학생 등록 → PRC_STUDENT_INSERT
2. 학생 수정 → PRC_STUDNET_UPDATE
3. 학생 삭제 → PRC_STUDENT_DELETE
4. 학생 출력 → ADMIN_STUDENT_VIEW
 (이름, 과정명, 수강과목, 수강과목 총점) - 단, 중도탈락한 경우도 확인 가능
 
--○ 학생 수강 관리
1. 학생 수강 입력 (과정 등록) → PRC_SUGANG_INSERT
2. 학생 수강 신청 수정 → PRC_SUGANG_UPDATE
3. 학생 수강 신청 삭제 → PRC_SUGANG_DELETE 

--○ 중도 탈락 관리
1. 중도 탈락 입력 → PRC_DROP_INSERT



CASE2. 교수자 계정 로그인

--○ 로그인 첫 화면
1. 자신이 강의한 과목 출력 → PRC_PROFESSOR_PRINT
2. 해당 과목의 성적을 처리할 수 있는 화면 출력 → PRC_SCORE_INSERT
(단, 강의 진행 되지 않은 과목 나오지 않음)

--○ 성적 입력
1. 과목의 성적 처리 → PRC_ALLOT_INSERT
2. 자신이 강의한 과목의 성적 입력 전용 화면 → PRC_SCORE_INSERT
(단, 중도 탈락한 경우 성적 입력 제외)
3. 성적 정보 수정 → PRC_SCORE_UPDATE
4. 성적 정보 삭제 → PRC_SCORE_DELETE

--○ 성적 출력
1. 자신이 강의한 과목에 대한 성적 출력 → PROF_SCORE_VIEW
(과목명, 과목기간, 교재명, 학생명, 출결, 실기, 필기, 총점, 등수)
(단, 수강을 한 모든 학생의 정보가 출력됨: 중도 탈락 사실도 확인 가능)



CASE 3. 학생 계정 로그인

--○ 로그인 첫 화면
→ 수강 과목 완료한 과목 확인: STUDENT_SUBJECT_VIEW

--○ 성적 출력 
1. 수강 과목 한 페이지에서 확인 → STU_SCORE_VIEW
(본인의 성적 정보 중, 수강을 이미 끝낸 과목들만 출력됨)
(단, 중도 탈락한 경우도 이미 수강한 과목 정보 출력 가능)



------------------------------------------------------------------------------*/



-- ■■■ TBL_ADMIN 관리자 테이블 생성 ■■■ --

CREATE TABLE TBL_ADMIN
( A_CODE        VARCHAR2(6)
, A_NAME        VARCHAR2(10)    CONSTRAINT ADMIN_A_NAME_NN NOT NULL
, A_ID          VARCHAR2(11)    CONSTRAINT ADMIN_A_ID_NN NOT NULL
, A_PW          VARCHAR2(20)    CONSTRAINT ADMIN_A_PW_NN NOT NULL
, A_REG_DATE    DATE            DEFAULT SYSDATE
, CONSTRAINT ADMIN_A_CODE_PK PRIMARY KEY(A_CODE)
, CONSTRAINT ADMIN_A_ID_UK UNIQUE(A_ID)
);
--==>> Table TBL_ADMIN이(가) 생성되었습니다.


-- ■■■ TBL_STUDENT 학생 테이블 생성 ■■■ --

CREATE TABLE TBL_STUDENT
( S_CODE        VARCHAR2(6)
, S_NAME        VARCHAR2(10)    CONSTRAINT STUDENT_S_NAME_NN NOT NULL
, S_SSN         CHAR(14)        CONSTRAINT STUDENT_S_SSN_NN NOT NULL
, S_ID          VARCHAR2(11)    CONSTRAINT STUDENT_S_ID_NN NOT NULL
, S_PW          VARCHAR2(20)    CONSTRAINT STUDENT_S_PW_NN NOT NULL
, S_REG_DATE    DATE            DEFAULT SYSDATE
, CONSTRAINT STUDENT_S_CODE_PK PRIMARY KEY(S_CODE)
, CONSTRAINT STUDENT_S_ID_UK UNIQUE(S_ID)
, CONSTRAINT STUDENT_S_SSN_UK UNIQUE(S_SSN)
);
--==>> Table TBL_STUDENT이(가) 생성되었습니다.



-- ■■■ TBL_PROFESSOR 교수 테이블 생성 ■■■ --

CREATE TABLE TBL_PROFESSOR
( P_CODE        VARCHAR2(6)
, P_NAME        VARCHAR2(10)    CONSTRAINT PROFESSOR_P_NAME_NN NOT NULL
, P_SSN         CHAR(14)        CONSTRAINT PROFESSOR_P_SSN_NN NOT NULL
, P_ID          VARCHAR2(11)    CONSTRAINT PROFESSOR_P_ID_NN NOT NULL
, P_PW          VARCHAR2(20)    CONSTRAINT PROFESSOR_P_PW_NN NOT NULL
, P_REG_DATE    DATE            DEFAULT SYSDATE
, CONSTRAINT PROFESSOR_P_CODE_PK PRIMARY KEY(P_CODE)
, CONSTRAINT PROFESSOR_P_ID_UK UNIQUE(P_ID)
, CONSTRAINT PROFESSOR_P_SSN_UK UNIQUE(P_SSN)
);
--==>> Table TBL_PROFESSOR이(가) 생성되었습니다.


-- ■■■ TBL_BOOK 교재 테이블 생성 ■■■ --

CREATE TABLE TBL_BOOK 
( B_CODE     VARCHAR2(4)        
, B_NAME     VARCHAR2(60)       CONSTRAINT BOOK_B_NAME_NN NOT NULL 
, CONSTRAINT BOOK_B_CODE_PK PRIMARY KEY(B_CODE)
, CONSTRAINT BOOK_B_NAME_UK UNIQUE(B_NAME)
);
--==>> Table TBL_BOOK이(가) 생성되었습니다.


-- ■■■ TBL_SUBJECT 과목 테이블 생성 ■■■ --

CREATE TABLE TBL_SUBJECT 
( SJ_CODE    VARCHAR2(4)
, SJ_NAME    VARCHAR2(60)        CONSTRAINT SUBJECT_NAME_NN NOT NULL
, CONSTRAINT SUBJECT_CODE_PK PRIMARY KEY(SJ_CODE)
, CONSTRAINT SUBJECT_NAME_UK UNIQUE(SJ_NAME)
);
--==>> Table TBL_SUBJECT이(가) 생성되었습니다.


-- ■■■ TBL_COURSE 과정 테이블 생성 ■■■ --

CREATE TABLE TBL_COURSE
( C_CODE         VARCHAR2(4)
, C_NAME         VARCHAR2(60)   CONSTRAINT COURSE_NAME_NN NOT NULL
, CONSTRAINT COURSE_CODE_PK PRIMARY KEY(C_CODE)
, CONSTRAINT COURSE_NAME_UK UNIQUE(C_NAME)
);
--==>> Table TBL_COURSE이(가) 생성되었습니다.


-- ■■■ TBL_ROOM 강의실 테이블 생성 ■■■ --

CREATE TABLE TBL_ROOM
( R_CODE    VARCHAR2(4)
, R_NAME    VARCHAR2(30)    CONSTRAINT ROOM_R_NAME_NN NOT NULL
, R_EXPLAIN   VARCHAR2(60)
, CONSTRAINT ROOM_R_CODE_PK PRIMARY KEY(R_CODE)
, CONSTRAINT ROOM_R_NAME_UK UNIQUE(R_NAME)
);
--==>> Table TBL_ROOM이(가) 생성되었습니다.



-- ■■■ TBL_ALLOT 배점 테이블 생성 ■■■ --

CREATE TABLE TBL_ALLOT
(AL_CODE NUMBER(4) 
,A_ALLOT NUMBER(3) CONSTRAINT ALLOT_A_ALLOT_NN NOT NULL 
,W_ALLOT NUMBER(3) CONSTRAINT ALLOT_W_ALLOT_NN NOT NULL 
,P_ALLOT NUMBER(3) CONSTRAINT ALLOT_P_ALLOT_NN NOT NULL 
,CONSTRAINT ALLOT_AL_CODE_PK PRIMARY KEY(AL_CODE)
);
--==>> Table TBL_ALLOT이(가) 생성되었습니다.


CREATE SEQUENCE SEQ_ALLOT
START WITH 1001
INCREMENT BY 1
MINVALUE 1001
MAXVALUE 9999
NOCACHE;
--==>> Sequence SEQ_ALLOT이(가) 생성되었습니다.


-- ■■■ TBL_OP_COURSE 과정개설 테이블 생성 ■■■ --

CREATE TABLE TBL_OP_COURSE
(OPC_CODE       NUMBER(4)
,C_CODE         VARCHAR2(4) CONSTRAINT OP_COURSE_C_CODE_NN NOT NULL
,R_CODE         VARCHAR2(4) CONSTRAINT OP_COURSE_R_CODE_NN NOT NULL
,START_DATE     DATE
,END_DATE       DATE
,CONSTRAINT OP_COURSE_OPC_CODE_PK PRIMARY KEY(OPC_CODE)
,CONSTRAINT OP_COURSE_C_CODE_FK FOREIGN KEY(C_CODE)
            REFERENCES TBL_COURSE(C_CODE)
,CONSTRAINT OP_COURSE_R_CODE_FK FOREIGN KEY(R_CODE)
            REFERENCES TBL_ROOM(R_CODE)
,CONSTRAINT OP_COURSE_DATE_CK CHECK(START_DATE < END_DATE)
);
--==>> Table TBL_OP_COURSE이(가) 생성되었습니다.


CREATE SEQUENCE SEQ_OP_COURSE
START WITH 1001
INCREMENT BY 1
MINVALUE 1001
MAXVALUE 9999
NOCACHE;
--==>> Sequence SEQ_OP_COURSE이(가) 생성되었습니다.


-- ■■■ TBL_OP_SUBJECT 과목개설 테이블 생성 ■■■ --

CREATE TABLE TBL_OP_SUBJECT
(OPS_CODE NUMBER(4)     
,SJ_CODE  VARCHAR2(4)   CONSTRAINT OP_SUBJECT_SJ_CODE_NN NOT NULL  
,OPC_CODE NUMBER(4)     CONSTRAINT OP_SUBJECT_OPC_CODE_NN NOT NULL
,P_CODE VARCHAR2(6)     CONSTRAINT OP_SUBJECT_P_CODE_NN NOT NULL
,B_CODE VARCHAR2(4)     CONSTRAINT OP_SUBJECT_B_CODE_NN NOT NULL
,AL_CODE NUMBER(4)      CONSTRAINT OP_SUBJECT_AL_CODE_NN NOT NULL
,START_DATE DATE        CONSTRAINT OP_SUBJECT_START_DATE_NN NOT NULL
,END_DATE DATE          CONSTRAINT OP_SUBJECT_END_DATE_NN NOT NULL 
, CONSTRAINT OP_SUBJECT_OPS_CODE_PK PRIMARY KEY(OPS_CODE)
, CONSTRAINT  OP_SUBJECT_SJ_CODE_FK FOREIGN KEY(SJ_CODE)
                        REFERENCES TBL_SUBJECT(SJ_CODE)
, CONSTRAINT  OP_SUBJECT_OPC_CODE_FK FOREIGN KEY(OPC_CODE)
                        REFERENCES TBL_OP_COURSE(OPC_CODE)
, CONSTRAINT  OP_SUBJECT_P_CODE_FK FOREIGN KEY(P_CODE)
                        REFERENCES TBL_PROFESSOR(P_CODE)
, CONSTRAINT  OP_SUBJECT_B_CODE_FK FOREIGN KEY(B_CODE)
                        REFERENCES TBL_BOOK(B_CODE)
, CONSTRAINT  OP_SUBJECT_AL_CODE_FK FOREIGN KEY(AL_CODE)
                        REFERENCES TBL_ALLOT(AL_CODE)
, CONSTRAINT OP_SUBJECT_END_DATE_CK CHECK(START_DATE<END_DATE)
);
--==>> Table TBL_OP_SUBJECT이(가) 생성되었습니다.

-- 교수 삭제 시 수강신청 정보를 남기면서 교수정보만 삭제하기 위해 NOT NULL 제약조건 해제
ALTER TABLE TBL_OP_SUBJECT
DROP CONSTRAINT OP_SUBJECT_P_CODE_NN;
--==>> Table TBL_OP_SUBJECT이(가) 변경되었습니다.

CREATE SEQUENCE SEQ_OPS_CODE
START WITH 1001
INCREMENT BY 1
MINVALUE 1001
MAXVALUE 9999
NOCACHE;
--==>> Sequence SEQ_OPS_CODE이(가) 생성되었습니다.



-- ■■■ TBL_SUGANG 수강신청 테이블 생성 ■■■ --

CREATE TABLE TBL_SUGANG
( SG_CODE    NUMBER(4)    
, S_CODE     VARCHAR2(6)  CONSTRAINT SUGANG_S_CODE_NN NOT NULL
, OPC_CODE   NUMBER(4)    CONSTRAINT SUGANG_OPC_CODE_NN NOT NULL
, SG_DATE    DATE         DEFAULT SYSDATE
, CONSTRAINT SUGANG_SG_CODE_PK PRIMARY KEY(SG_CODE) 
, CONSTRAINT SUGANG_S_CODE_FK FOREIGN KEY(S_CODE)
             REFERENCES TBL_STUDENT(S_CODE)            
, CONSTRAINT SUGANG_OPC_CODE_FK FOREIGN KEY(OPC_CODE)
             REFERENCES TBL_OP_COURSE(OPC_CODE)                            
);
--==>> Table TBL_SUGANG이(가) 생성되었습니다.

-- 학생 삭제 시 수강신청 정보를 남기면서 학생정보만 삭제하기 위해 NOT NULL 제약조건 해제
ALTER TABLE TBL_SUGANG
DROP CONSTRAINT SUGANG_S_CODE_NN;
--==>> Table TBL_SUGANG이(가) 변경되었습니다.

CREATE SEQUENCE SEQ_SUGANG
START WITH 1001
INCREMENT BY 1
MINVALUE 1001
MAXVALUE 9999
NOCACHE;
--==>> Sequence SEQ_SUGANG이(가) 생성되었습니다.


-- ■■■ TBL_DROP 중도탈락 테이블 생성 ■■■ --

CREATE TABLE TBL_DROP
( D_CODE    NUMBER(4)
, SG_CODE   NUMBER(4)   CONSTRAINT DROP_SG_CODE_NN NOT NULL 
, REASON    VARCHAR2(60)
, DR_DATE   DATE        DEFAULT SYSDATE
, CONSTRAINT DROP_D_CODE_PK PRIMARY KEY(D_CODE)
, CONSTRAINT DROP_SG_CODE_FK FOREIGN KEY(SG_CODE)
             REFERENCES TBL_SUGANG(SG_CODE)
);
--==>> Table TBL_DROP이(가) 생성되었습니다.

CREATE SEQUENCE SEQ_DROP
START WITH 1001
INCREMENT BY 1
MINVALUE 1001
MAXVALUE 9999
NOCACHE;
--==>> Sequence SEQ_DROP이(가) 생성되었습니다.

-- ■■■ TBL_SCORE 성적 테이블 생성 ■■■ --

CREATE TABLE TBL_SCORE
( SC_CODE   NUMBER(4)
, SG_CODE   NUMBER(4)   CONSTRAINT SCORE_SG_CODE_NN NOT NULL
, OPS_CODE  NUMBER(4)   CONSTRAINT SCORE_OPS_CODE_NN NOT NULL
, A_SCORE   NUMBER(3)
, W_SCORE   NUMBER(3)
, P_SCORE   NUMBER(3)
, CONSTRAINT SCORE_SC_CODE_PK PRIMARY KEY(SC_CODE)
, CONSTRAINT SCORE_SG_CODE_FK FOREIGN KEY(SG_CODE)
             REFERENCES TBL_SUGANG(SG_CODE)
, CONSTRAINT SCORE_OPS_CODE_FK FOREIGN KEY(OPS_CODE)
             REFERENCES TBL_OP_SUBJECT(OPS_CODE)
);
--==>> Table TBL_SCORE이(가) 생성되었습니다.


CREATE SEQUENCE SEQ_SCORE
START WITH 1001
INCREMENT BY 1
MINVALUE 1001
MAXVALUE 9999
NOCACHE;
--==>> Sequence SEQ_SCORE이(가) 생성되었습니다.




------------------------- 테이블 구조 확인 -------------------------------------


DESC TBL_ADMIN;
/*
이름         널?       유형           
---------- -------- ------------ 
A_CODE     NOT NULL VARCHAR2(6)  
A_NAME     NOT NULL VARCHAR2(10) 
A_ID       NOT NULL VARCHAR2(11) 
A_PW       NOT NULL VARCHAR2(20) 
A_REG_DATE          DATE         
*/

DESC TBL_STUDENT;
/*
이름         널?       유형           
---------- -------- ------------ 
S_CODE     NOT NULL VARCHAR2(6)  
S_NAME     NOT NULL VARCHAR2(10) 
S_SSN      NOT NULL CHAR(14)     
S_ID       NOT NULL VARCHAR2(11) 
S_PW       NOT NULL VARCHAR2(20) 
S_REG_DATE          DATE       
*/

DESC TBL_PROFESSOR;
/*
이름         널?       유형           
---------- -------- ------------ 
P_CODE     NOT NULL VARCHAR2(6)  
P_NAME     NOT NULL VARCHAR2(10) 
P_SSN      NOT NULL CHAR(14)     
P_ID       NOT NULL VARCHAR2(11) 
P_PW       NOT NULL VARCHAR2(20) 
P_REG_DATE          DATE  
*/

DESC TBL_BOOK;
/*
이름     널?       유형           
------ -------- ------------ 
B_CODE NOT NULL VARCHAR2(4)  
B_NAME NOT NULL VARCHAR2(60)
*/

DESC TBL_SUBJECT;
/*
이름      널?       유형           
------- -------- ------------ 
SJ_CODE NOT NULL VARCHAR2(4)  
SJ_NAME NOT NULL VARCHAR2(60)
*/

DESC TBL_COURSE;
/*
이름     널?       유형           
------ -------- ------------ 
C_CODE NOT NULL VARCHAR2(4)  
C_NAME NOT NULL VARCHAR2(60)
*/

DESC TBL_ROOM;
/*
이름      널?       유형           
------- -------- ------------ 
R_CODE  NOT NULL VARCHAR2(4)  
R_NAME  NOT NULL VARCHAR2(30) 
R_EXPLAIN        VARCHAR2(60)
*/

DESC TBL_ALLOT;
/*
이름      널?       유형        
------- -------- --------- 
AL_CODE NOT NULL NUMBER(4) 
A_ALLOT NOT NULL NUMBER(3) 
W_ALLOT NOT NULL NUMBER(3) 
P_ALLOT NOT NULL NUMBER(3) 
*/

DESC TBL_OP_COURSE;
/*
이름         널?       유형          
---------- -------- ----------- 
OPC_CODE   NOT NULL NUMBER(4)   
C_CODE     NOT NULL VARCHAR2(4) 
R_CODE     NOT NULL VARCHAR2(4) 
START_DATE NOT NULL DATE        
END_DATE   NOT NULL DATE        
*/

DESC TBL_OP_SUBJECT;
/*
이름         널?       유형          
---------- -------- ----------- 
OPS_CODE   NOT NULL NUMBER(4)   
SJ_CODE    NOT NULL VARCHAR2(4) 
OPC_CODE   NOT NULL NUMBER(4)   
P_CODE     NOT NULL VARCHAR2(6) 
B_CODE     NOT NULL VARCHAR2(4) 
AL_CODE    NOT NULL NUMBER(4)   
START_DATE NOT NULL DATE        
END_DATE   NOT NULL DATE 
*/

DESC TBL_SUGANG;
/*
이름       널?       유형          
-------- -------- ----------- 
SG_CODE  NOT NULL NUMBER(4)   
S_CODE   NOT NULL VARCHAR2(6) 
OPC_CODE NOT NULL NUMBER(4)   
SG_DATE           DATE        
*/

DESC TBL_DROP;
/*
이름      널?       유형           
------- -------- ------------ 
D_CODE  NOT NULL NUMBER(4)    
SG_CODE NOT NULL NUMBER(4)    
REASON           VARCHAR2(60) 
DR_DATE          DATE         
*/

DESC TBL_SCORE;
/*
이름       널?       유형        
-------- -------- --------- 
SC_CODE  NOT NULL NUMBER(4) 
SG_CODE  NOT NULL NUMBER(4) 
OPS_CODE NOT NULL NUMBER(4) 
A_SCORE           NUMBER(3) 
W_SCORE           NUMBER(3) 
P_SCORE           NUMBER(3)
*/


------------------------제약조건 확인-------------------------------------------

--※ 제약조건 확인 전용 뷰(VIEW) 생성
CREATE OR REPLACE VIEW VIEW_SG_CONSTCHECK
AS
SELECT UC.OWNER "OWNER"
     , UC.CONSTRAINT_NAME "CONSTRAINT_NAME"
     , UC.TABLE_NAME "TABLE_NAME"
     , UC.CONSTRAINT_TYPE "CONSTRAINT_TYPE"
     , UCC.COLUMN_NAME "COLUMN_NAME"
     , UC.SEARCH_CONDITION "SEARCH_CONDITION"
     , UC.DELETE_RULE "DELETE_RULE"
FROM USER_CONSTRAINTS UC JOIN USER_CONS_COLUMNS UCC
ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME;
--==>> View VIEW_SG_CONSTCHECK이(가) 생성되었습니다.

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_ADMIN';
--==>>
/*
HR	ADMIN_A_NAME_NN	TBL_ADMIN	C	A_NAME	"A_NAME" IS NOT NULL	
HR	ADMIN_A_ID_NN	TBL_ADMIN	C	A_ID	"A_ID" IS NOT NULL	
HR	ADMIN_A_PW_NN	TBL_ADMIN	C	A_PW	"A_PW" IS NOT NULL	
HR	ADMIN_A_CODE_PK	TBL_ADMIN	P	A_CODE		
HR	ADMIN_A_ID_UK	TBL_ADMIN	U	A_ID		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_STUDENT';
--==>>
/*
HR	STUDENT_S_NAME_NN	TBL_STUDENT	C	S_NAME	"S_NAME" IS NOT NULL	
HR	STUDENT_S_SSN_NN	TBL_STUDENT	C	S_SSN	"S_SSN" IS NOT NULL	
HR	STUDENT_S_ID_NN	    TBL_STUDENT C	S_ID	"S_ID" IS NOT NULL	
HR	STUDENT_S_PW_NN 	TBL_STUDENT C	S_PW	"S_PW" IS NOT NULL	
HR	STUDENT_S_CODE_PK	TBL_STUDENT	P	S_CODE		
HR	STUDENT_S_ID_UK	    TBL_STUDENT U	S_ID		
HR	STUDENT_S_SSN_UK	TBL_STUDENT	U	S_SSN		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_PROFESSOR';
--==>>
/*
HR	PROFESSOR_P_NAME_NN	TBL_PROFESSOR	C	P_NAME	"P_NAME" IS NOT NULL	
HR	PROFESSOR_P_SSN_NN	TBL_PROFESSOR	C	P_SSN	"P_SSN" IS NOT NULL	
HR	PROFESSOR_P_ID_NN	TBL_PROFESSOR	C	P_ID	"P_ID" IS NOT NULL	
HR	PROFESSOR_P_PW_NN	TBL_PROFESSOR	C	P_PW	"P_PW" IS NOT NULL	
HR	PROFESSOR_P_CODE_PK	TBL_PROFESSOR	P	P_CODE		
HR	PROFESSOR_P_ID_UK	TBL_PROFESSOR	U	P_ID		
HR	PROFESSOR_P_SSN_UK	TBL_PROFESSOR	U	P_SSN		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_BOOK';
--==>>
/*
HR	BOOK_B_NAME_NN	TBL_BOOK	C	B_NAME	"B_NAME" IS NOT NULL	
HR	BOOK_B_CODE_PK	TBL_BOOK	P	B_CODE		
HR	BOOK_B_NAME_UK	TBL_BOOK	U	B_NAME		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_SUBJECT';
--==>>
/*
HR	SUBJECT_NAME_NN	TBL_SUBJECT	C	SJ_NAME	"SJ_NAME" IS NOT NULL	
HR	SUBJECT_CODE_PK	TBL_SUBJECT	P	SJ_CODE		
HR	SUBJECT_NAME_UK	TBL_SUBJECT	U	SJ_NAME		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_COURSE';
--==>>
/*
HR	COURSE_NAME_NN	TBL_COURSE	C	C_NAME	"C_NAME" IS NOT NULL	
HR	COURSE_CODE_PK	TBL_COURSE	P	C_CODE		
HR	COURSE_NAME_UK	TBL_COURSE	U	C_NAME		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_ROOM';
--==>>
/*
HR	ROOM_R_NAME_NN	TBL_ROOM	C	R_NAME	"R_NAME" IS NOT NULL	
HR	ROOM_R_CODE_PK	TBL_ROOM	P	R_CODE		
HR	ROOM_R_NAME_UK	TBL_ROOM	U	R_NAME		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_ALLOT';
--==>>
/*
HR	ALLOT_A_ALLOT_NN	TBL_ALLOT	C	A_ALLOT	"A_ALLOT" IS NOT NULL	
HR	ALLOT_W_ALLOT_NN	TBL_ALLOT	C	W_ALLOT	"W_ALLOT" IS NOT NULL	
HR	ALLOT_P_ALLOT_NN	TBL_ALLOT	C	P_ALLOT	"P_ALLOT" IS NOT NULL	
HR	ALLOT_AL_CODE_PK	TBL_ALLOT	P	AL_CODE		
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_OP_COURSE';
--==>>
/*
HR	OP_COURSE_C_CODE_NN	TBL_OP_COURSE	C	C_CODE	"C_CODE" IS NOT NULL	
HR	OP_COURSE_R_CODE_NN	TBL_OP_COURSE	C	R_CODE	"R_CODE" IS NOT NULL	
HR	OP_COURSE_DATE_CK	TBL_OP_COURSE	C	START_DATE	START_DATE < END_DATE	
HR	OP_COURSE_DATE_CK	TBL_OP_COURSE	C	END_DATE	START_DATE < END_DATE	
HR	OP_COURSE_OPC_CODE_PKTBL_OP_COURSE	P	OPC_CODE		
HR	OP_COURSE_C_CODE_FK	TBL_OP_COURSE	R	C_CODE		NO ACTION
HR	OP_COURSE_R_CODE_FK	TBL_OP_COURSE	R	R_CODE		NO ACTION
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_OP_SUBJECT';
--==>>
/*
HR	OP_SUBJECT_SJ_CODE_NN	TBL_OP_SUBJECT	C	SJ_CODE	"SJ_CODE" IS NOT NULL	
HR	OP_SUBJECT_OPC_CODE_NN	TBL_OP_SUBJECT	C	OPC_CODE	"OPC_CODE" IS NOT NULL	
HR	OP_SUBJECT_P_CODE_NN	TBL_OP_SUBJECT	C	P_CODE	"P_CODE" IS NOT NULL	
HR	OP_SUBJECT_B_CODE_NN	TBL_OP_SUBJECT	C	B_CODE	"B_CODE" IS NOT NULL	
HR	OP_SUBJECT_AL_CODE_NN	TBL_OP_SUBJECT	C	AL_CODE	"AL_CODE" IS NOT NULL	
HR	OP_SUBJECT_START_DATE_NNTBL_OP_SUBJECT	C	START_DATE	"START_DATE" IS NOT NULL	
HR	OP_SUBJECT_END_DATE_NN	TBL_OP_SUBJECT	C	END_DATE	"END_DATE" IS NOT NULL	
HR	OP_SUBJECT_END_DATE_CK	TBL_OP_SUBJECT	C	START_DATE	START_DATE<END_DATE	
HR	OP_SUBJECT_END_DATE_CK	TBL_OP_SUBJECT	C	END_DATE	START_DATE<END_DATE	
HR	OP_SUBJECT_OPS_CODE_PK	TBL_OP_SUBJECT	P	OPS_CODE		
HR	OP_SUBJECT_SJ_CODE_FK	TBL_OP_SUBJECT	R	SJ_CODE		NO ACTION
HR	OP_SUBJECT_OPC_CODE_FK	TBL_OP_SUBJECT	R	OPC_CODE		NO ACTION
HR	OP_SUBJECT_P_CODE_FK	TBL_OP_SUBJECT	R	P_CODE		NO ACTION
HR	OP_SUBJECT_B_CODE_FK	TBL_OP_SUBJECT	R	B_CODE		NO ACTION
HR	OP_SUBJECT_AL_CODE_FK	TBL_OP_SUBJECT	R	AL_CODE		NO ACTION
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_SUGANG';
--==>>
/*
HR	SUGANG_S_CODE_NN	TBL_SUGANG	C	S_CODE	    "S_CODE" IS NOT NULL	
HR	SUGANG_OPC_CODE_NN	TBL_SUGANG	C	OPC_CODE	"OPC_CODE" IS NOT NULL	
HR	SUGANG_SG_CODE_PK	TBL_SUGANG	P	SG_CODE		
HR	SUGANG_S_CODE_FK	TBL_SUGANG	R	S_CODE		NO ACTION
HR	SUGANG_OPC_CODE_FK	TBL_SUGANG	R	OPC_CODE	NO ACTION
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_DROP';
--==>>
/*
HR	DROP_SG_CODE_NN	TBL_DROP	C	SG_CODE	"SG_CODE" IS NOT NULL	
HR	DROP_D_CODE_PK	TBL_DROP	P	D_CODE		
HR	DROP_SG_CODE_FK	TBL_DROP	R	SG_CODE		NO ACTION
*/

SELECT *
FROM VIEW_SG_CONSTCHECK
WHERE TABLE_NAME = 'TBL_SCORE';
--==>>
/*
HR	SCORE_SG_CODE_NN	TBL_SCORE	C	SG_CODE	    "SG_CODE" IS NOT NULL	
HR	SCORE_OPS_CODE_NN	TBL_SCORE	C	OPS_CODE	"OPS_CODE" IS NOT NULL	
HR	SCORE_SC_CODE_PK	TBL_SCORE	P	SC_CODE		
HR	SCORE_SG_CODE_FK	TBL_SCORE	R	SG_CODE		NO ACTION
HR	SCORE_OPS_CODE_FK	TBL_SCORE	R	OPS_CODE	NO ACTION
*/



----------------------- ■■■ 시퀀스 확인 ■■■ ------------------------------

SELECT *
FROM USER_SEQUENCES;
--==>>
/*
SEQ_ALLOT   	1001	9999	1	N	N	0	1001
SEQ_DROP	    1001	9999	1	N	N	0	1001
SEQ_OPS_CODE	1001	9999	1	N	N	0	1001
SEQ_OP_COURSE	1001	9999	1	N	N	0	1001
SEQ_SCORE	    1001	9999	1	N	N	0	1001
SEQ_SUGANG	    1001	9999	1	N	N	0	1001
*/



-------------------- ■■■ 프로시저 생성 ■■■ -------------------------------

-- 0. 로그인 프로시저 생성
CREATE OR REPLACE PROCEDURE PRC_LOGIN
(V_DIV   IN VARCHAR2
 ,V_ID   IN TBL_ADMIN.A_ID%TYPE
 ,V_PW   IN TBL_ADMIN.A_PW%TYPE
)
IS
    -- 출력용 이름 담을 변수
    V_NAME  TBL_ADMIN.A_NAME%TYPE;

    --EXCEPTION에 사용될 변수와 값
    RESULTCODE_USERID        NUMBER(1);
    RESULTCODE_USERPW_MATCH NUMBER(1);
    USER_DEFINE_ERROR_ID EXCEPTION;
    USER_DEFINE_ERROR_PW EXCEPTION;
    
    --STUDENT_SUBJECT_VIEW 위한 변수 추가 변수 선언
    V_S_VIEW_NAME       TBL_STUDENT.S_NAME%TYPE;
    V_S_VIEW_SUBJECT    TBL_SUBJECT.SJ_NAME%TYPE;

    --STUDENT_SUBJECT_VIEW 위한 커서 선언
    CURSOR CUR_STUDENT_SELECT 
    IS
        SELECT 학생명, 과목명
        FROM STUDENT_SUBJECT_VIEW
        WHERE 학생명 = (SELECT S_NAME
                        FROM TBL_STUDENT
                        WHERE S_ID=V_ID);
   
BEGIN          
    --사용자의 ID가 존재 유무 확인
    
    IF V_DIV = '관리자'
        THEN SELECT COUNT(*) INTO RESULTCODE_USERID 
            FROM TBL_ADMIN 
            WHERE A_ID = V_ID;
    END IF;    
    
    
    IF V_DIV = '학생'
        THEN SELECT COUNT(*) INTO RESULTCODE_USERID 
            FROM TBL_STUDENT
            WHERE S_ID = V_ID;
    END IF;
    
  
    IF V_DIV = '교수자'
        THEN SELECT COUNT(*) INTO RESULTCODE_USERID 
            FROM TBL_PROFESSOR 
            WHERE P_ID = V_ID;
    END IF;
    
    --DBMS_OUTPUT.PUT_LINE('RESULTCODE_USERID: '||RESULTCODE_USERID);

    
    IF RESULTCODE_USERID  =  0
        THEN  RAISE USER_DEFINE_ERROR_ID;
    END IF;
    
    --사용자의 ID와 PW 일치 유무 확인
    
    IF V_DIV = '관리자'
        THEN SELECT COUNT(*) INTO RESULTCODE_USERPW_MATCH
            FROM TBL_ADMIN 
            WHERE A_ID = V_ID AND A_PW = V_PW;   
    END IF;    
    
    
    IF V_DIV = '학생'
        THEN SELECT COUNT(*) INTO RESULTCODE_USERPW_MATCH
            FROM TBL_STUDENT
            WHERE S_ID = V_ID AND S_PW=V_PW;         
    END IF;
    
  
    IF V_DIV = '교수자'
        THEN SELECT COUNT(*) INTO RESULTCODE_USERPW_MATCH
             FROM TBL_PROFESSOR 
             WHERE P_ID = V_ID AND P_PW=V_PW;     
    END IF;
    
    --DBMS_OUTPUT.PUT_LINE('RESULTCODE_USERPW_MATCH: '||RESULTCODE_USERPW_MATCH);    
    
    IF RESULTCODE_USERPW_MATCH  =  0
        THEN RAISE USER_DEFINE_ERROR_PW;
    END IF;
    
    --사용자의 ID 존재 확인 및 ID와 PW 일치 확인 모두 끝난 후 학생, 교수자 로그인 첫화면 출력
    
    IF V_DIV = '학생'
        THEN SELECT S_NAME INTO V_NAME
             FROM TBL_STUDENT 
             WHERE S_ID = V_ID AND S_PW = V_PW;
             
             DBMS_OUTPUT.PUT_LINE('[로그인 성공] 학생 ' || V_NAME ||'님 환영합니다.');
             
             OPEN CUR_STUDENT_SELECT;
             LOOP
                 FETCH CUR_STUDENT_SELECT INTO V_S_VIEW_NAME, V_S_VIEW_SUBJECT;
                 EXIT WHEN CUR_STUDENT_SELECT%NOTFOUND;
                 --출력
                 DBMS_OUTPUT.PUT_LINE(V_S_VIEW_NAME||' , '|| V_S_VIEW_SUBJECT);
            END LOOP;
            CLOSE CUR_STUDENT_SELECT;       
    END IF;
    
    IF V_DIV = '교수자'
        THEN SELECT P_NAME INTO V_NAME
             FROM TBL_PROFESSOR 
             WHERE P_ID = V_ID AND P_PW = V_PW; 
             
             DBMS_OUTPUT.PUT_LINE('[로그인 성공] 교수자 ' || V_NAME ||'님 환영합니다.');
             
             PRC_PROFESSOR_PRINT(V_ID);
    END IF;
    
    IF V_DIV = '관리자'
        THEN SELECT A_NAME INTO V_NAME
             FROM TBL_ADMIN 
             WHERE A_ID = V_ID AND A_PW = V_PW;
             DBMS_OUTPUT.PUT_LINE('[로그인 성공] 관리자 ' || V_NAME ||'님 환영합니다.');    
    END IF;
    
    EXCEPTION 
    WHEN USER_DEFINE_ERROR_ID
        THEN RAISE_APPLICATION_ERROR(-20001, 'ID가 존재하지 않습니다.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR_PW
        THEN RAISE_APPLICATION_ERROR(-20002, 'PW를 확인해주세요.');
            ROLLBACK;
    WHEN OTHERS
        THEN  ROLLBACK;

END;
--==>> Procedure PRC_LOGIN이(가) 컴파일되었습니다.


-- 1. 학생 계정 등록/수정/삭제

--○ 학생 등록
-- 입력 정보는 학생 이름, 주민 뒷자리는 학생 로그인시 패스워드로 사용되도록
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_NAME    IN TBL_STUDENT.S_NAME%TYPE
, V_SSN     IN TBL_STUDENT.S_SSN%TYPE
, V_ID      IN TBL_STUDENT.S_ID%TYPE
)
IS
    V_CODE  TBL_STUDENT.S_CODE%TYPE;
    V_PW    TBL_STUDENT.S_PW%TYPE;
    
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    -- V_CODE 자동입력
    SELECT CONCAT('S', NVL(MAX(TO_NUMBER(SUBSTR(S_CODE, 2, 5))), 10000) + 1) INTO V_CODE
    FROM TBL_STUDENT;
    
    -- V_PW
    V_PW := SUBSTR(V_SSN, 8);
    
    -- 예외 발생(SSN 잘못 입력시)
    IF(V_SSN NOT LIKE '______-_______')
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- INSERT 쿼리문
    INSERT INTO TBL_STUDENT(S_CODE, S_NAME, S_SSN, S_ID, S_PW)
    VALUES (V_CODE, V_NAME, V_SSN, V_ID, V_PW);
    
    -- 커밋 
    COMMIT;
    
    -- 예외 처리
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '주민번호를 하이픈(-) 포함 14자리로 입력해주세요');    
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>> Procedure PRC_STUDENT_INSERT이(가) 컴파일되었습니다.


--○ 학생 수정
CREATE OR REPLACE PROCEDURE PRC_STUDENT_UPDATE
( V_CODE        IN TBL_STUDENT.S_CODE%TYPE
, V_NAME        IN TBL_STUDENT.S_NAME%TYPE
, V_SSN         IN TBL_STUDENT.S_SSN%TYPE
, V_ID          IN TBL_STUDENT.S_ID%TYPE
, V_PW          IN TBL_STUDENT.S_PW%TYPE
, V_REG_DATE    IN TBL_STUDENT.S_REG_DATE%TYPE
)
IS  
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    -- 예외 발생(SSN 잘못 입력시)
    IF(V_SSN NOT LIKE '______-_______')
        THEN RAISE USER_DEFINE_ERROR;
    END IF;

    -- UPDATE 쿼리문
    UPDATE TBL_STUDENT
    SET S_NAME = V_NAME
      , S_SSN = V_SSN
      , S_ID = V_ID
      , S_PW = V_PW
      , S_REG_DATE = V_REG_DATE
    WHERE S_CODE = V_CODE;
    
    -- 커밋
    COMMIT;
    
    -- 예외 처리
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '주민번호를 하이픈(-) 포함 14자리로 입력해주세요.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;

END;
--==>> Procedure PRC_STUDENT_UPDATE이(가) 컴파일되었습니다.


--○ 학생 삭제
CREATE OR REPLACE PROCEDURE PRC_STUDENT_DELETE
( V_CODE    IN TBL_STUDENT.S_CODE%TYPE
)
IS
BEGIN
    UPDATE TBL_SUGANG
    SET S_CODE = NULL
    WHERE S_CODE = V_CODE;
    
    -- DELETE 쿼리문 작성 
    DELETE
    FROM TBL_STUDENT
    WHERE S_CODE = V_CODE;
    
    -- 커밋 
    COMMIT; 
END;
--==>> Procedure PRC_STUDENT_DELETE이(가) 컴파일되었습니다.



-- 2. 교수 등록/수정/삭제

--○ 교수 입력
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_INSERT
(V_NAME     IN TBL_PROFESSOR.P_NAME%TYPE
,V_SSN      IN TBL_PROFESSOR.P_SSN%TYPE
,V_ID       IN TBL_PROFESSOR.P_ID%TYPE
)
IS  
    V_CODE  TBL_PROFESSOR.P_CODE%TYPE;
    V_PW    TBL_PROFESSOR.P_PW%TYPE;
    
    USER_DEFINE_ERROR       EXCEPTION;
BEGIN
    SELECT CONCAT('P',NVL(MAX(TO_NUMBER(SUBSTR(P_CODE,2,5))),10000)+1) INTO V_CODE
    FROM TBL_PROFESSOR;
    
    V_PW := SUBSTR(V_SSN,8);
    
    IF(V_SSN NOT LIKE '______-_______')
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    
    INSERT INTO TBL_PROFESSOR(P_CODE, P_NAME,P_SSN,P_ID,P_PW)
    VALUES (V_CODE,V_NAME,V_SSN,V_ID,V_PW);
    
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '입력 정보가 잘못 되었습니다.');
                ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
END;
--==>>Procedure PRC_PROFESSOR_INSERT이(가) 컴파일되었습니다.

--○ 교수 수정
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_UPDATE 
(V_CODE         IN TBL_PROFESSOR.P_CODE%TYPE
,V_NAME         IN TBL_PROFESSOR.P_NAME%TYPE
,V_SSN          IN TBL_PROFESSOR.P_SSN%TYPE
,V_ID           IN TBL_PROFESSOR.P_ID%TYPE
,V_PW           IN TBL_PROFESSOR.P_PW%TYPE
,V_REG_DATE     IN TBL_PROFESSOR.P_REG_DATE%TYPE
)
IS
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    IF(V_SSN NOT LIKE '______-_______')
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_PROFESSOR
    SET P_NAME = V_NAME
       ,P_SSN = V_SSN
       ,P_ID = V_ID
       ,P_PW = V_PW
       ,P_REG_DATE = V_REG_DATE
    WHERE P_CODE = V_CODE;
    
    EXCEPTION 
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '입력 정보가 잘못 되었습니다.');
        WHEN OTHERS 
            THEN ROLLBACK;
END;
--==>>Procedure PRC_PROFESSOR_UPDATE이(가) 컴파일되었습니다.

--○ 교수 삭제
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_DELETE
( V_CODE    IN TBL_PROFESSOR.P_CODE%TYPE
)
IS
BEGIN
    UPDATE TBL_OP_SUBJECT
    SET P_CODE = NULL
    WHERE P_CODE = V_CODE;
    
    DELETE
    FROM TBL_PROFESSOR
    WHERE P_CODE = V_CODE;
    
    COMMIT; 
END;
--==>>Procedure PRC_PROFESSOR_DELETE이(가) 컴파일되었습니다.




--3. 과정 등록 / 수정 / 삭제 (TBL_OP_COURSE)

--○ 개설 과정 등록
CREATE OR REPLACE PROCEDURE PRC_OP_COURSE_INSERT
( V_C_NAME        IN TBL_COURSE.C_NAME%TYPE               
, V_R_CODE        IN TBL_ROOM.R_CODE%TYPE                 
, V_START_DATE    IN TBL_OP_COURSE.START_DATE%TYPE         
, V_END_DATE      IN TBL_OP_COURSE.END_DATE%TYPE
)
IS
    -- 과정명을 과정코드로 입력하기 위한 변수 선언
    V_C_CODE    TBL_COURSE.C_CODE%TYPE;
    
    -- 예외 처리 시 확인할 변수
    V_RC_NAME   TBL_COURSE.C_NAME%TYPE;
    
    -- 사용자 정의 예외에 대한 변수 선언
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 예외 확인: 입력받은 C_NAME(과정명)이 정확한지 확인
    SELECT COUNT(*) INTO V_RC_NAME
    FROM TBL_COURSE
    WHERE C_NAME = V_C_NAME;
    
    IF (V_RC_NAME != 1)
     THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- C_NAME(과정명)을 입력하면 비교하여 C_CODE(과정코드) 값 얻어오기
    SELECT C_CODE INTO V_C_CODE
    FROM TBL_COURSE
    WHERE C_NAME = V_C_NAME;
    
    -- TBL_OP_COURSE 테이블에 데이터 입력 (과정 개설)
    INSERT INTO TBL_OP_COURSE(OPC_CODE, C_CODE, R_CODE, START_DATE, END_DATE)
    VALUES(SEQ_OP_COURSE.NEXTVAL, V_C_CODE, V_R_CODE, V_START_DATE, V_END_DATE);
    
    -- 커밋
    COMMIT;
    
    -- 예외처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR
           THEN RAISE_APPLICATION_ERROR(-20004, '과정명을 잘못 입력하셨습니다.');
                   ROLLBACK;
       WHEN OTHERS
           THEN ROLLBACK;
END;
--==>> Procedure PRC_OP_COURSE_INSERT이(가) 컴파일되었습니다.




--○ 개설 과정 수정
CREATE OR REPLACE PROCEDURE PRC_OP_COURSE_UPDATE
( V_OPC_CODE      IN TBL_OP_COURSE.OPC_CODE%TYPE
, V_C_NAME        IN TBL_COURSE.C_NAME%TYPE
, V_R_CODE        IN TBL_ROOM.R_CODE%TYPE
, V_START_DATE    IN TBL_OP_COURSE.START_DATE%TYPE 
, V_END_DATE      IN TBL_OP_COURSE.END_DATE%TYPE
)
IS
    -- 과정명을 과정코드로 입력하기 위한 변수 선언
    V_C_CODE      TBL_COURSE.C_CODE%TYPE;
    
    -- 예외 처리 시 확인할 변수
    V_ROPC_CODE   TBL_COURSE.C_CODE%TYPE;
    
    -- 사용자 정의 예외에 대한 변수 선언
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 예외 확인: 입력받은 OPC_CODE(개설과정코드)가 정확한지 확인
    SELECT COUNT(*) INTO V_ROPC_CODE
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;
    
    IF (V_ROPC_CODE = 0)
     THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- C_NAME(과정명)을 입력하면 비교하여 C_CODE(과정코드) 값 얻어오기
    SELECT C_CODE INTO V_C_CODE
    FROM TBL_COURSE
    WHERE C_NAME = V_C_NAME;
    
    -- TBL_OP_COURSE 테이블 데이터 수정
    UPDATE TBL_OP_COURSE
    SET C_CODE = V_C_CODE, R_CODE = V_R_CODE, START_DATE = V_START_DATE, END_DATE = V_END_DATE
    WHERE OPC_CODE = V_OPC_CODE; 
    
    -- 커밋
    COMMIT;

    -- 예외처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR
           THEN RAISE_APPLICATION_ERROR(-20005, '과정코드를 잘못 입력하셨습니다.');
                   ROLLBACK;
       WHEN OTHERS
           THEN ROLLBACK;
END;
--==>> Procedure PRC_OP_COURSE_UPDATE이(가) 컴파일되었습니다.


--○ 개설 과정 삭제
CREATE OR REPLACE PROCEDURE PRC_OP_COURSE_DELETE
(  V_OPC_CODE      IN TBL_OP_COURSE.OPC_CODE%TYPE
)
IS
    -- 예외 처리 시 확인할 변수
    V_ROPC_CODE   TBL_COURSE.C_CODE%TYPE;
    
    -- 사용자 정의 예외에 대한 변수 선언
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 예외 확인: 입력받은 OPC_CODE(개설과정코드)가 정확한지 확인
    SELECT COUNT(*) INTO V_ROPC_CODE
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;
    
    IF (V_ROPC_CODE = 0)
     THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- TBL_OP_COURSE 테이블 데이터 삭제
    DELETE
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;
    
    -- 커밋
    COMMIT;
    
    -- 예외처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR
           THEN RAISE_APPLICATION_ERROR(-20005, '과정코드를 잘못 입력하셨습니다.');
                   ROLLBACK;
       WHEN OTHERS
           THEN ROLLBACK;
END;
--==>> Procedure PRC_OP_COURSE_DELETE이(가) 컴파일되었습니다.



--4. 개설 과목 등록/수정/삭제 (TBL_OP_SUBJECT)

--○ 개설과목 등록
CREATE OR REPLACE PROCEDURE PRC_OP_SUBJECT_INSERT
( V_SJ_CODE           IN TBL_SUBJECT.SJ_CODE%TYPE
, V_OPC_CODE          IN TBL_OP_COURSE.OPC_CODE%TYPE
, V_P_CODE            IN TBL_PROFESSOR.P_CODE%TYPE
, V_B_CODE            IN TBL_BOOK.B_CODE%TYPE
, V_AL_CODE           IN TBL_ALLOT.AL_CODE%TYPE
, V_START_DATE        IN TBL_OP_SUBJECT.START_DATE%TYPE
, V_END_DATE          IN TBL_OP_SUBJECT.END_DATE%TYPE

)
IS
    OPC_STARTDATE       TBL_OP_COURSE.START_DATE%TYPE;
    OPC_ENDDATE         TBL_OP_COURSE.END_DATE%TYPE;

    V_S_DATE    TBL_OP_SUBJECT.START_DATE%TYPE;
    V_E_DATE    TBL_OP_SUBJECT.END_DATE%TYPE;
    
    CURSOR CUR_OPS_DATE
    IS
    SELECT START_DATE, END_DATE
    FROM TBL_OP_SUBJECT
    WHERE OPC_CODE = V_OPC_CODE;
    
    USER_DEFINE_ERROR    EXCEPTION;
    USER_DEFINE_ERROR2   EXCEPTION; 
    USER_DEFINE_ERROR3   EXCEPTION;
    
BEGIN
    -- 과정기간안에 날짜가 포함되지 않을 시 예외 발생
    SELECT START_DATE, END_DATE INTO OPC_STARTDATE, OPC_ENDDATE       
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;
    
    IF (V_START_DATE < OPC_STARTDATE OR V_END_DATE > OPC_ENDDATE)
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;
    
    -- 같은 과정의 다른 과목들과 날짜가 겹칠 시 예외 발생
    OPEN CUR_OPS_DATE;
    
    LOOP
        FETCH CUR_OPS_DATE INTO V_S_DATE, V_E_DATE;
        
        EXIT WHEN CUR_OPS_DATE%NOTFOUND;
        
        IF((V_START_DATE BETWEEN V_S_DATE AND V_E_DATE) OR (V_END_DATE BETWEEN V_S_DATE AND V_E_DATE))
            THEN RAISE USER_DEFINE_ERROR;
        END IF;
        
    END LOOP;
    
    CLOSE CUR_OPS_DATE;
    
    -- INSERT 쿼리문 
    INSERT INTO TBL_OP_SUBJECT(OPS_CODE, SJ_CODE, OPC_CODE, P_CODE, B_CODE, AL_CODE, START_DATE, END_DATE)
    VALUES (SEQ_OPS_CODE.NEXTVAL, V_SJ_CODE, V_OPC_CODE, V_P_CODE, V_B_CODE,V_AL_CODE,V_START_DATE, V_END_DATE);
    
    -- 커밋
    COMMIT;
    
    -- 예외처리
    EXCEPTION
            
            WHEN USER_DEFINE_ERROR
                THEN RAISE_APPLICATION_ERROR(-20010,'입력한 날짜가 기존 과목 날짜와 겹칩니다. 다시 시도하세요.');
                     ROLLBACK;
            WHEN USER_DEFINE_ERROR2   
                THEN RAISE_APPLICATION_ERROR(-20011,'입력한 날짜가 기존 개설강좌 날짜 안에 유효하지 않습니다.');
                     ROLLBACK;
            WHEN OTHERS
                THEN DBMS_OUTPUT.PUT_LINE('예외처리 되지 않은 에러가 발생했습니다.');
                     ROLLBACK;
END;
--==>> Procedure PRC_OP_SUBJECT_INSERT이(가) 컴파일되었습니다.
 

 
--○ 개설 과목 수정
CREATE OR REPLACE PROCEDURE PRC_OP_SUBJECT_UPDATE
( V_OPS_CODE          IN TBL_OP_SUBJECT.OPS_CODE%TYPE  
, V_SJ_CODE           IN TBL_SUBJECT.SJ_CODE%TYPE
, V_OPC_CODE          IN TBL_OP_COURSE.OPC_CODE%TYPE
, V_P_CODE            IN TBL_PROFESSOR.P_CODE%TYPE
, V_B_CODE            IN TBL_BOOK.B_CODE%TYPE
, V_AL_CODE           IN TBL_ALLOT.AL_CODE%TYPE
, V_START_DATE        IN TBL_OP_SUBJECT.START_DATE%TYPE
, V_END_DATE          IN TBL_OP_SUBJECT.END_DATE%TYPE
)
IS

    -- 예외 처리 시 확인할 변수
    V_ROPS_CODE   TBL_SUBJECT.SJ_CODE%TYPE;
    
    -- 사용자 정의 예외에 대한 변수 선언
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 예외 확인: 입력받은 OPS_CODE(개설과목코드)가 정확한지 확인
    SELECT COUNT(*) INTO V_ROPS_CODE
    FROM TBL_OP_SUBJECT
    WHERE OPS_CODE = V_OPS_CODE;
    
    IF (V_ROPS_CODE = 0)
     THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- TBL_OP_COURSE 테이블 데이터 수정
    UPDATE TBL_OP_SUBJECT
    SET SJ_CODE = V_SJ_CODE, OPC_CODE = V_OPC_CODE, P_CODE=V_P_CODE, B_CODE=V_B_CODE
      , AL_CODE=V_AL_CODE,START_DATE = V_START_DATE, END_DATE = V_END_DATE
    WHERE OPS_CODE = V_OPS_CODE; 
    
    -- 커밋
    COMMIT;
    
    -- 예외처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR
           THEN RAISE_APPLICATION_ERROR(-20017, '과목코드를 잘못 입력하셨습니다.');
                   ROLLBACK;
       WHEN OTHERS
           THEN ROLLBACK;
    
END; 
--==>> Procedure PRC_OP_SUBJECT_UPDATE이(가) 컴파일되었습니다.


--○ 개설 과목 삭제
CREATE OR REPLACE PROCEDURE PRC_OP_SUBJECT_DELETE
(  V_OPS_CODE      IN TBL_OP_SUBJECT.OPS_CODE%TYPE
)
IS
    -- 예외 처리 시 확인할 변수
    V_ROPS_CODE   TBL_SUBJECT.SJ_CODE%TYPE;
    
    -- 사용자 정의 예외에 대한 변수 선언
    USER_DEFINE_ERROR EXCEPTION;
BEGIN
    -- 예외 확인: 입력받은 OPS_CODE(개설과정코드)가 정확한지 확인
    SELECT COUNT(*) INTO V_ROPS_CODE
    FROM TBL_OP_SUBJECT
    WHERE OPS_CODE = V_OPS_CODE;
    
    IF (V_ROPS_CODE = 0)
     THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- TBL_OP_SUBJECT 테이블 데이터 삭제
    DELETE
    FROM TBL_OP_SUBJECT
    WHERE OPS_CODE = V_OPS_CODE;
    
    -- 커밋
    COMMIT;
    
    -- 예외처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR
           THEN RAISE_APPLICATION_ERROR(-20017, '과목코드를 잘못 입력하셨습니다.');
                   ROLLBACK;
       WHEN OTHERS
           THEN ROLLBACK;
END;
--==>> Procedure PRC_OP_SUBJECT_DELETE이(가) 컴파일되었습니다.




--5. 배점 등록

CREATE OR REPLACE PROCEDURE PRC_ALLOT_INSERT
( V_A_ALLOT          IN TBL_ALLOT.A_ALLOT%TYPE             -- 출결
, V_W_ALLOT          IN TBL_ALLOT.W_ALLOT%TYPE             -- 필기
, V_P_ALLOT          IN TBL_ALLOT.P_ALLOT%TYPE             -- 실기
)
IS      
    V_AL_CODE       TBL_ALLOT.AL_CODE%TYPE;   
    -- 사용자 정의 예외처리 변수 선언
    USER_DEFINE_ERROR EXCEPTION;  
    
BEGIN 
    -- 각 배점의 총합이 100이 아니면 에러 발생
    IF(V_A_ALLOT + V_W_ALLOT + V_P_ALLOT != 100)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
        
    -- 각각의 배점 입력 시 'AL'로 시작하는 시퀀스 배점 코드 생성하며 데이터 입력됨
    INSERT INTO TBL_ALLOT(AL_CODE, A_ALLOT, W_ALLOT, P_ALLOT)
    VALUES(SEQ_ALLOT.NEXTVAL, V_A_ALLOT, V_W_ALLOT, V_P_ALLOT);
    
    COMMIT;
    
    -- 에러 발생 시 아래 메시지 출력 후 롤백됨
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20006, '배점은 100점 만점을 기준으로 입력해주세요.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;    
END;
--==>> Procedure PRC_ALLOT_INSERT이(가) 컴파일되었습니다.



--6. 수강 입력/수정/등록

--○ 수강 입력
CREATE OR REPLACE PROCEDURE PRC_SUGANG_INSERT
( V_S_CODE      IN TBL_STUDENT.S_CODE%TYPE
, V_OPC_CODE    IN TBL_OP_COURSE.OPC_CODE%TYPE
)
IS
    --EXCEPTION에 사용될 변수와 값
    RESULTCODE_S_CODE               NUMBER(1);
    RESULTCODE_OVERLAP              NUMBER(1);
    RESULTCODE_OPC_CODE             NUMBER(1);
    
    USER_DEFINE_ERROR_S_CODE EXCEPTION;
    USER_DEFINE_ERROR_OVERLAP EXCEPTION;
    USER_DEFINE_ERROR_OPC_CODE EXCEPTION; 
    
BEGIN
    SELECT COUNT(*) INTO RESULTCODE_S_CODE 
    FROM TBL_STUDENT 
    WHERE S_CODE = V_S_CODE;   
    
    IF RESULTCODE_S_CODE = 0
        THEN  RAISE USER_DEFINE_ERROR_S_CODE;
    END IF;

    SELECT COUNT(*) INTO RESULTCODE_OVERLAP
    FROM TBL_SUGANG 
    WHERE S_CODE = V_S_CODE;   
    
    IF RESULTCODE_OVERLAP = 1
        THEN  RAISE USER_DEFINE_ERROR_OVERLAP;
    END IF;
    
    SELECT COUNT(*) INTO RESULTCODE_OPC_CODE
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;   
    
    IF RESULTCODE_OPC_CODE = 0
        THEN  RAISE USER_DEFINE_ERROR_OPC_CODE;
    END IF;     
    
    -- INSERT 쿼리문
    INSERT INTO TBL_SUGANG(SG_CODE, S_CODE, OPC_CODE, SG_DATE)
    VALUES (SEQ_SUGANG.NEXTVAL, V_S_CODE, V_OPC_CODE, SYSDATE);
    
    
    EXCEPTION 
    WHEN USER_DEFINE_ERROR_S_CODE
        THEN RAISE_APPLICATION_ERROR(-20009, '학생코드가 존재하지 않습니다.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR_OPC_CODE
        THEN RAISE_APPLICATION_ERROR(-20010, '개설과정코드가 존재하지 않습니다.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR_OVERLAP
        THEN RAISE_APPLICATION_ERROR(-20011, '이미 과정을 등록한 학생입니다.');
            ROLLBACK;            
    WHEN OTHERS
        THEN  ROLLBACK;
            
    -- 커밋 
    COMMIT;
END;
--==>> Procedure PRC_SUGANG_INSERT이(가) 컴파일되었습니다.


--○ 수강 신청 수정
CREATE OR REPLACE PROCEDURE PRC_SUGANG_UPDATE
( V_SG_CODE   IN TBL_SUGANG.SG_CODE%TYPE
, V_S_CODE    IN TBL_SUGANG.S_CODE%TYPE
, V_OPC_CODE  IN TBL_SUGANG.OPC_CODE%TYPE
, V_SG_DATE   IN TBL_SUGANG.SG_DATE%TYPE
)
IS  
    --EXCEPTION에 사용될 변수와 값
    RESULTCODE_SG_CODE              NUMBER(1);
    RESULTCODE_S_CODE               NUMBER(1);
    RESULTCODE_OPC_CODE             NUMBER(1);
    
    USER_DEFINE_ERROR_SG_CODE EXCEPTION;
    USER_DEFINE_ERROR_S_CODE EXCEPTION;
    USER_DEFINE_ERROR_OPC_CODE EXCEPTION; 
    
BEGIN
    SELECT COUNT(*) INTO RESULTCODE_SG_CODE 
    FROM TBL_SUGANG
    WHERE SG_CODE = V_SG_CODE;   
    
    IF RESULTCODE_SG_CODE = 0
        THEN  RAISE USER_DEFINE_ERROR_SG_CODE;
    END IF;

    SELECT COUNT(*) INTO RESULTCODE_S_CODE 
    FROM TBL_STUDENT
    WHERE S_CODE = V_S_CODE;   
    
    IF RESULTCODE_S_CODE = 0
        THEN  RAISE USER_DEFINE_ERROR_S_CODE;
    END IF;

    SELECT COUNT(*) INTO RESULTCODE_OPC_CODE
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;   
    
    IF RESULTCODE_OPC_CODE = 0
        THEN  RAISE USER_DEFINE_ERROR_OPC_CODE;
    END IF;     
    
    
    -- UPDATE 쿼리문
    UPDATE TBL_SUGANG
    SET S_CODE = V_S_CODE, OPC_CODE = V_OPC_CODE, SG_DATE = V_SG_DATE
    WHERE SG_CODE = V_SG_CODE;

    -- 커밋
    COMMIT;

    -- EXCEPTION
    EXCEPTION 
    WHEN USER_DEFINE_ERROR_SG_CODE
        THEN RAISE_APPLICATION_ERROR(-20012, '수강코드가 존재하지 않습니다.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR_S_CODE
        THEN RAISE_APPLICATION_ERROR(-20009, '학생코드가 존재하지 않습니다.');
            ROLLBACK;
    WHEN USER_DEFINE_ERROR_OPC_CODE
        THEN RAISE_APPLICATION_ERROR(-20010, '개설과정코드가 존재하지 않습니다.');
            ROLLBACK;          
    WHEN OTHERS
        THEN  ROLLBACK;
END;
--==>> Procedure PRC_SUGANG_UPDATE이(가) 컴파일되었습니다.


--○ 수강 신청 삭제
CREATE OR REPLACE PROCEDURE PRC_SUGANG_DELETE
( V_SG_CODE   IN TBL_SUGANG.SG_CODE%TYPE
)
IS
    --EXCEPTION에 사용될 변수와 값
    RESULTCODE_SG_CODE               NUMBER(1);
    
    USER_DEFINE_ERROR_SG_CODE EXCEPTION;
    
BEGIN
    SELECT COUNT(*) INTO RESULTCODE_SG_CODE 
    FROM TBL_SUGANG
    WHERE SG_CODE=V_SG_CODE;

    IF RESULTCODE_SG_CODE = 0
        THEN  RAISE USER_DEFINE_ERROR_SG_CODE;
    END IF; 
    
    -- DELETE 쿼리문
    DELETE 
    FROM TBL_SUGANG
    WHERE SG_CODE = V_SG_CODE;
    
    -- EXCEPTION
    EXCEPTION 
    WHEN USER_DEFINE_ERROR_SG_CODE
        THEN RAISE_APPLICATION_ERROR(-20012, '수강코드가 존재하지 않습니다.');
                 ROLLBACK;          
    WHEN OTHERS
        THEN    ROLLBACK;
        
END;
--==>> Procedure PRC_SUGANG_DELETE이(가) 컴파일되었습니다.




--7. 성적 입력/수정/삭제

--○ 성적 입력
CREATE OR REPLACE PROCEDURE PRC_SCORE_INSERT
( V_SG_CODE             IN TBL_SUGANG.SG_CODE%TYPE
, V_OPS_CODE            IN TBL_OP_SUBJECT.OPS_CODE%TYPE
, V_A_SCORE             IN TBL_SCORE.A_SCORE%TYPE
, V_W_SCORE             IN TBL_SCORE.W_SCORE%TYPE
, V_P_SCORE             IN TBL_SCORE.P_SCORE%TYPE
)
IS
    V_A_ALLOT            TBL_ALLOT.A_ALLOT%TYPE;
    V_W_ALLOT            TBL_ALLOT.W_ALLOT%TYPE;
    V_P_ALLOT            TBL_ALLOT.P_ALLOT%TYPE;

    V_OPC_CODE           TBL_OP_COURSE.OPC_CODE%TYPE;
    V_AL_CODE            TBL_ALLOT.AL_CODE%TYPE;
    V_D_CODE             TBL_DROP.D_CODE%TYPE;
    
    -- 사용자 정의 예외에 대한 변수 선언
    USER_DEFINE_ERROR   EXCEPTION;
    USER_DEFINE_ERROR2  EXCEPTION;
BEGIN
    
    -- 수강코드와 개설과목 코드를 이용하여 배점 코드 및 각 배점들 뽑아냄
    SELECT A.AL_CODE, A.A_ALLOT, A.W_ALLOT, A.P_ALLOT INTO V_AL_CODE, V_A_ALLOT, V_W_ALLOT, V_P_ALLOT
    FROM TBL_SUGANG SG, TBL_OP_COURSE OPC, TBL_OP_SUBJECT OPS, TBL_ALLOT A
    WHERE SG.SG_CODE = V_SG_CODE
      AND OPS.OPS_CODE = V_OPS_CODE
      AND SG.OPC_CODE = OPC.OPC_CODE(+)
      AND OPC.OPC_CODE = OPS.OPC_CODE(+)
      AND OPS.AL_CODE = A.AL_CODE(+);
      
    -- 성적이 배점보다 크면 예외 발생
    IF ( V_A_SCORE > V_A_ALLOT OR V_W_SCORE > V_W_ALLOT OR V_P_SCORE > V_P_ALLOT )
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
  
    -- 데이터 입력
    INSERT INTO TBL_SCORE(SC_CODE, SG_CODE, OPS_CODE, A_SCORE, W_SCORE, P_SCORE)
    VALUES(SEQ_SCORE.NEXTVAL, V_SG_CODE, V_OPS_CODE, V_A_SCORE, V_W_SCORE, V_P_SCORE);

    -- 커밋
    COMMIT;
    
    -- 예외처리
    EXCEPTION
       WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20013, '점수는 배점을 초과할 수 없습니다. ');
                 ROLLBACK;
       WHEN no_data_found
            THEN DBMS_OUTPUT.PUT_LINE('수강코드 또는 개설과목코드를 잘못 입력하셨습니다. 다시 한 번 확인해주세요.');
                 ROLLBACK;
       WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('예외처리 되지 않은 에러 발생');
                 ROLLBACK;
END;
--==>> Procedure PRC_SCORE_INSERT이(가) 컴파일되었습니다.


--○ 성적 수정
CREATE OR REPLACE PROCEDURE PRC_SCORE_UPDATE
( V_SC_CODE      IN TBL_SCORE.SC_CODE%TYPE
, V_A_SCORE      IN TBL_SCORE.A_SCORE%TYPE
, V_W_SCORE      IN TBL_SCORE.W_SCORE%TYPE
, V_P_SCORE      IN TBL_SCORE.P_SCORE%TYPE
)
IS
    V_OPS_CODE          TBL_OP_SUBJECT.OPS_CODE%TYPE;
    V_END_DATE          TBL_OP_SUBJECT.END_DATE%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    SELECT OPS_CODE INTO V_OPS_CODE
    FROM TBL_SCORE
    WHERE SC_CODE = V_SC_CODE;

    SELECT END_DATE INTO V_END_DATE
    FROM TBL_SCORE SC JOIN TBL_OP_SUBJECT SU
    ON SC.OPS_CODE = SU.OPS_CODE
    WHERE SC.SC_CODE = V_SC_CODE;
    
    
    IF(V_END_DATE > SYSDATE)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    UPDATE TBL_SCORE
    SET A_SCORE =V_A_SCORE , W_SCORE =V_W_SCORE, P_SCORE =V_P_SCORE
    WHERE SC_CODE = V_SC_CODE; 
    
    COMMIT;
    
    EXCEPTION
    WHEN USER_DEFINE_ERROR
        THEN RAISE_APPLICATION_ERROR(-20008,'성적입력은 과목이 종료된 후에 가능합니다.');
             ROLLBACK;
    WHEN OTHERS THEN ROLLBACK;
    
END;
--==>>Procedure PRC_SCORE_UPDATE이(가) 컴파일되었습니다.


--○ 성적 삭제
CREATE OR REPLACE PROCEDURE PRC_SCORE_DELETE
(V_CODE         IN TBL_SCORE.SC_CODE%TYPE
)
IS
BEGIN
    DELETE
    FROM TBL_SCORE
    WHERE SC_CODE = V_CODE;
   
    COMMIT; 
END;
--==>>Procedure PRC_SCORE_DELETE이(가) 컴파일되었습니다.




--8. 중도탈락 입력/수정/삭제

--○ 중도탈락 입력
CREATE OR REPLACE PROCEDURE PRC_DROP_INSERT
( V_SG_CODE        IN TBL_DROP.SG_CODE%TYPE -- A - 빅데이터 - 자바, 오라클, R, python 
, V_SC_CODE        IN TBL_SCORE.SC_CODE%TYPE
, V_REASON         IN TBL_DROP.REASON%TYPE 
, V_DR_DATE        IN TBL_DROP.DR_DATE%TYPE
)
IS  
    
    V_D_CODE         TBL_DROP.D_CODE%TYPE;
    
    -- 중도탈락 INSERT로 입력된 SG_CODE에 해당하는 학생 성적 총합  
    V_TOT            NUMBER(3) := 0;    
    
    -- 중도탈락 유무 확인 변수 
    V_DROP_CHECK    NUMBER(1);
    
    -- 수강코드 유무 확인 변수 
    V_SG_CODE_CHECK    NUMBER(1);
    
    -- 중도탈락 명단 유무 확인 변수
    V_D_SG_CODE_CHECK    NUMBER(1);
    
    -- 중도탈락 일자 예외처리 변수
    V_OPC_CODE       TBL_OP_COURSE.OPC_CODE%TYPE;
    V_START_DATE     TBL_OP_COURSE.START_DATE%TYPE;
    V_END_DATE       TBL_OP_COURSE.END_DATE%TYPE;
    
    -- 예외 처리 변수
    USER_DEFINE_ERROR  EXCEPTION;
    USER_DEFINE_ERROR2 EXCEPTION;
    USER_DEFINE_ERROR3 EXCEPTION;
    USER_DEFINE_ERROR4 EXCEPTION;
BEGIN
        SELECT NVL(MAX(D_CODE), 1000) +1 INTO V_D_CODE
        FROM TBL_DROP;

        SELECT COUNT(*) INTO V_SG_CODE_CHECK  
        FROM TBL_SUGANG
        WHERE SG_CODE=V_SG_CODE;
        
        DBMS_OUTPUT.PUT_LINE('수강코드 존재 확인값: '||V_SG_CODE_CHECK);        
        --예외 처리 (SUGANG테이블에 수강코드 존재 유무 확인)
        IF (V_SG_CODE_CHECK = 0)
            THEN RAISE USER_DEFINE_ERROR2;
        END IF;
        
        --중도 탈락 대상 학생의 총점 확인
        SELECT A_SCORE+W_SCORE+P_SCORE INTO V_TOT
        FROM TBL_SCORE
        WHERE SG_CODE=V_SG_CODE
          AND SC_CODE = V_SC_CODE;
 
        SELECT COUNT(*) INTO V_D_SG_CODE_CHECK  
        FROM TBL_DROP
        WHERE SG_CODE=V_SG_CODE;
        DBMS_OUTPUT.PUT_LINE('중도탈락테이블존재하는 값: '||V_D_SG_CODE_CHECK );
         
        --예외 처리 (DROP테이블에 이미 존재하는 학생인지 유무 확인)
        IF (V_D_SG_CODE_CHECK = 1)
            THEN RAISE USER_DEFINE_ERROR3;
        END IF;
        
        --예외 처리 (DROP테이블에 없고 SUGANG테이블에 있는 학생중 중도탈락 유무 확인)
        IF (V_TOT >= 80)
           THEN V_DROP_CHECK := 0;
        ELSE
            V_DROP_CHECK := 1;
        END IF;
        
        IF (V_TOT >= 80)
           THEN V_DROP_CHECK := 0;
        ELSE
            V_DROP_CHECK := 1;
        END IF;
        
        IF (V_DROP_CHECK = 0 AND V_REASON != '자발적 중도탈락')
            THEN RAISE USER_DEFINE_ERROR;
        END IF;
        
        --  중도탈락 일자 예외처리 (과정 시작 전, 과정 종료 후 중도탈락 될 수 없음)
        SELECT OPC_CODE INTO V_OPC_CODE
        FROM TBL_SUGANG
        WHERE SG_CODE = V_SG_CODE;
        
        SELECT START_DATE, END_DATE INTO V_START_DATE, V_END_DATE
        FROM TBL_OP_COURSE
        WHERE OPC_CODE = V_OPC_CODE;
        
        IF ( V_DR_DATE < V_START_DATE OR V_DR_DATE > V_END_DATE )
            THEN RAISE USER_DEFINE_ERROR4;
        END IF;
    
        -- INSERT 쿼리문
        INSERT INTO TBL_DROP(D_CODE,SG_CODE,REASON,DR_DATE)
        VALUES(V_D_CODE,V_SG_CODE,V_REASON,SYSDATE); 
        
        COMMIT;
        
        --EXCEPTION
        EXCEPTION 
        WHEN USER_DEFINE_ERROR4
            THEN RAISE_APPLICATION_ERROR(-20018, '중도탈락 일자가 잘못되었습니다.');
                 ROLLBACK;
        WHEN USER_DEFINE_ERROR3
            THEN RAISE_APPLICATION_ERROR(-20016, '이미 중도탈락된 학생입니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20015, '과목수강 명단에 없습니다.');
                ROLLBACK;
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20014, '중도탈락 대상이 아닙니다.');
                ROLLBACK;
        --WHEN OTHERS
        --    THEN ROLLBACK;   
END;
--==>> Procedure PRC_DROP_INSERT이(가) 컴파일되었습니다.

--○ 중도탈락 수정
CREATE OR REPLACE PROCEDURE PRC_DROP_UPDATE
( V_D_CODE         IN TBL_DROP.D_CODE%TYPE
, V_SG_CODE        IN TBL_DROP.SG_CODE%TYPE 
, V_REASON         IN TBL_DROP.REASON%TYPE 
, V_DR_DATE        IN TBL_DROP.DR_DATE%TYPE
)
IS
    V_OPC_CODE       TBL_OP_COURSE.OPC_CODE%TYPE;
    V_START_DATE     TBL_OP_COURSE.START_DATE%TYPE;
    V_END_DATE       TBL_OP_COURSE.END_DATE%TYPE;
    
    V_CHECK         NUMBER(5);
    
    USER_DEFINE_ERROR  EXCEPTION;
    USER_DEFINE_ERROR2 EXCEPTION;
BEGIN
    SELECT COUNT(*) INTO V_CHECK
    FROM TBL_DROP
    WHERE D_CODE = V_D_CODE;
    
    IF(V_CHECK = 0)
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;

    --  중도탈락 일자 예외처리 (과정 시작 전, 과정 종료 후 중도탈락 될 수 없음)
    SELECT OPC_CODE INTO V_OPC_CODE
    FROM TBL_SUGANG
    WHERE SG_CODE = V_SG_CODE;
    
    SELECT START_DATE, END_DATE INTO V_START_DATE, V_END_DATE
    FROM TBL_OP_COURSE
    WHERE OPC_CODE = V_OPC_CODE;
    
    IF ( V_DR_DATE < V_START_DATE OR V_DR_DATE > V_END_DATE )
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
        
    -- UPDATE 쿼리문
    UPDATE TBL_DROP
    SET SG_CODE = V_SG_CODE
      , REASON = V_REASON
      , DR_DATE = V_DR_DATE
    WHERE D_CODE = V_D_CODE;
    
    -- 커밋 
    COMMIT; 
    
    -- 예외 처리
    EXCEPTION 
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20018, '중도탈락 일자가 잘못되었습니다.');
                 ROLLBACK;
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20019, '유효하지 않은 중도탈락코드입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('예외처리하지 않은 에러 발생');
                 ROLLBACK;
END;
--==>> Procedure PRC_DROP_UPDATE이(가) 컴파일되었습니다.

--○ 중도탈락 삭제
CREATE OR REPLACE PROCEDURE PRC_DROP_DELETE
( V_D_CODE         IN TBL_DROP.D_CODE%TYPE
)
IS
    V_CHECK     NUMBER(5);
    
    USER_DEFINE_ERROR EXCEPTION;
BEGIN

    SELECT COUNT(*) INTO V_CHECK
    FROM TBL_DROP
    WHERE D_CODE = V_D_CODE;
    
    IF(V_CHECK = 0)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    

    -- DELETE 쿼리문
    DELETE
    FROM TBL_DROP
    WHERE D_CODE = V_D_CODE;
    
    -- 커밋 
    COMMIT; 
    
    -- 예외 처리
    EXCEPTION 
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20018, '유효하지 않은 중도탈락코드입니다.');
                 ROLLBACK;
END;
--==>> Procedure PRC_DROP_DELETE이(가) 컴파일되었습니다.



------------- ■■■ 교수, 학생 로그인 시 출력 화면 ■■■ ---------------------

--○ 교수 로그인 시 과목 출력 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_PRINT
(V_ID IN TBL_PROFESSOR.P_ID%TYPE
)
IS
    V_P_NAME      TBL_PROFESSOR.P_NAME%TYPE;
    V_SJ_NAME      TBL_SUBJECT.SJ_NAME%TYPE;
    V_START_DATE    TBL_OP_SUBJECT.START_DATE%TYPE;
    V_END_DATE      TBL_OP_SUBJECT.END_DATE%TYPE;
    V_B_NAME     TBL_BOOK.B_NAME%TYPE;

    CURSOR CUR_PRO_ID_SELECT
    IS
        (SELECT 교수이름,과목이름,START_DATE "시작일",END_DATE"종료일",B_NAME"교재명"
        FROM  (SELECT*
                FROM  (SELECT 교수코드,  교수이름, 과목코드,과목이름  
                             FROM(SELECT 교수코드,교수이름,SJ_CODE
                                  FROM    (SELECT P_CODE "교수코드",P_NAME "교수이름"
                                        FROM TBL_PROFESSOR
                                        WHERE P_ID=V_ID)T
                                        JOIN
                                        (SELECT *
                                        FROM TBL_OP_SUBJECT)E
                                ON T.교수코드=E.P_CODE)K
                                JOIN
                                (SELECT SJ_CODE "과목코드", SJ_NAME "과목이름"
                                 FROM TBL_SUBJECT) L
                             ON  K.SJ_CODE=L.과목코드) O
                             JOIN
                             (SELECT*
                             FROM TBL_OP_SUBJECT)K
                ON O.과목코드=K.SJ_CODE)KK
                JOIN
                (SELECT*
                 FROM TBL_BOOK)KKK
        ON KK.B_CODE=KKK.B_CODE);
    
BEGIN

    OPEN CUR_PRO_ID_SELECT;
    LOOP
        FETCH CUR_PRO_ID_SELECT INTO  V_P_NAME, V_SJ_NAME,  V_START_DATE,  V_END_DATE,  V_B_NAME;
        EXIT WHEN CUR_PRO_ID_SELECT%NOTFOUND;
        --출력
        DBMS_OUTPUT.PUT_LINE(V_P_NAME||' , ' ||V_SJ_NAME||' , ' ||V_START_DATE||' , ' ||V_END_DATE||' , ' ||V_B_NAME);
    END LOOP;
    CLOSE CUR_PRO_ID_SELECT;
END;


--○ 학생 로그인시 과목 출력 (STUDENT_SUBJECT_VIEW)
-- 수강이 끝난 과목만 출력 가능
CREATE OR REPLACE VIEW STUDENT_SUBJECT_VIEW
AS
SELECT S.S_NAME "학생명", SJ.SJ_NAME "과목명"
FROM TBL_STUDENT S, TBL_SUGANG SG, TBL_OP_COURSE OPC, TBL_SUBJECT SJ, TBL_OP_SUBJECT OPS
WHERE S.S_CODE = SG.S_CODE(+)
  AND SG.OPC_CODE = OPC.OPC_CODE(+)
  AND OPS.OPC_CODE(+) = OPC.OPC_CODE
  AND OPS.SJ_CODE = SJ.SJ_CODE(+)
  AND OPS.END_DATE < SYSDATE;
--==>> View STUDENT_SUBJECT_VIEW이(가) 생성되었습니다.


----------------------- ■■■ VIEW 생성 ■■■ --------------------------------


--○ 관리자 계정에서 교수 정보 출력
CREATE OR REPLACE VIEW VIEW_PROFESSOR
AS
SELECT PR.P_NAME "교수명", SU.SJ_NAME "배정된과목명", OS.START_DATE "시작일", OS.END_DATE "종료일"
     , BO.B_NAME "교재명", TR.R_NAME "강의실"
     , (CASE WHEN SYSDATE BETWEEN OS.START_DATE AND OS.END_DATE THEN '강의진행중'
             WHEN SYSDATE > OS.END_DATE THEN '강의종료'
             ELSE '강의준비중' END) "강의진행여부"
FROM TBL_OP_SUBJECT OS JOIN TBL_OP_COURSE OC
ON OS.OPC_CODE = OC.OPC_CODE
    JOIN TBL_PROFESSOR PR
    ON OS.P_CODE = PR.P_CODE
        JOIN TBL_SUBJECT SU
        ON OS.SJ_CODE = SU.SJ_CODE
            JOIN TBL_BOOK BO
            ON OS.B_CODE = BO.B_CODE
                JOIN TBL_ROOM TR
                ON OC.R_CODE = TR.R_CODE;
--==>>View VIEW_PROFESSOR이(가) 생성되었습니다.


--○ 관리자 계정에서 등록된 학생 출력 (ADMIN_STUDENT_VIEW)
-- 출력 정보 : 학생 이름, 과정명, 수강과목, 수강과목 총점
CREATE OR REPLACE VIEW ADMIN_STUDENT_VIEW
AS
SELECT S.S_NAME "학생이름"
     , NVL(C.C_NAME, '수강미등록') "과정명"
     , NVL(SJ.SJ_NAME, '개설예정') "수강과목"
     , (SC.A_SCORE + SC.P_SCORE + SC.W_SCORE) "수강과목 총점"
     , CASE WHEN D.D_CODE IS NOT NULL 
            THEN CONCAT('중도탈락 - ',TO_CHAR(D.D_CODE))
            ELSE NULL
       END "중도탈락여부"
FROM TBL_STUDENT S, TBL_SUGANG SG, TBL_SCORE SC, TBL_DROP D, TBL_OP_SUBJECT OPS, TBL_SUBJECT SJ
   , TBL_OP_COURSE OPC, TBL_COURSE C
WHERE S.S_CODE = SG.S_CODE(+)
  AND SG.SG_CODE = D.SG_CODE(+)
  AND SC.SG_CODE(+) = SG.SG_CODE
  AND OPS.SJ_CODE = SJ.SJ_CODE(+)
  AND OPS.OPS_CODE(+) = SC.OPS_CODE
  AND OPC.C_CODE = C.C_CODE(+)
  AND SG.OPC_CODE = OPC.OPC_CODE(+);
--==>> View ADMIN_STUDENT_VIEW이(가) 생성되었습니다.


--○ 관리자 계정에서 등록된 모든 과목 정보 출력 뷰(ADMIN_SUBJECT_VIEW)
CREATE OR REPLACE VIEW ADMIN_SUBJECT_VIEW
AS
SELECT CO.C_NAME"과정명"
     , R.R_NAME"강의실"
     , SU.SJ_NAME"과목명"
     , OS.START_DATE"과목시작일"
     , OS.END_DATE"과목종료일"
     , BO.B_NAME"교재명"
     , PR.P_NAME"교수자명"
FROM TBL_COURSE CO, TBL_ROOM R, TBL_SUBJECT SU, TBL_OP_SUBJECT OS, TBL_BOOK BO, TBL_PROFESSOR PR, TBL_OP_COURSE OC
WHERE CO.C_CODE(+) = OC.C_CODE
  AND R.R_CODE(+) = OC.R_CODE 
  AND OC.OPC_CODE = OS.OPC_CODE(+)
  AND SU.SJ_CODE(+) = OS.SJ_CODE 
  AND BO.B_CODE(+) = OS.B_CODE 
  AND PR.P_CODE(+) = OS.P_CODE;
--==>> View ADMIN_SUBJECT_VIEW이(가) 생성되었습니다.



--○ 관리자 계정에서 개설된 과정 출력 (ADMIN_OP_COURSE_VIEW)
-- 출력 정보: 과정명, 강의실, 과목명, 과목 기간, 교재 명, 교수자명
CREATE OR REPLACE VIEW ADMIN_OP_COURSE_VIEW
AS
SELECT C.C_NAME "과정명", R.R_NAME "강의실명", S.SJ_NAME "과목명"
     , OPS.START_DATE "과목시작일", OPS.END_DATE "과목종료일"
    , B.B_NAME "교재명", P.P_NAME "교수자명"
FROM TBL_COURSE C, TBL_ROOM R, TBL_SUBJECT S, TBL_OP_COURSE OPC, 
     TBL_OP_SUBJECT OPS, TBL_BOOK B, TBL_PROFESSOR P
WHERE P.P_CODE = OPS.P_CODE
  AND B.B_CODE = OPS.B_CODE
  AND S.SJ_CODE = OPS.SJ_CODE
  AND OPS.OPC_CODE = OPC.OPC_CODE
  AND OPC.C_CODE = C.C_CODE
  AND OPC.R_CODE = R.R_CODE;
--==>> View ADMIN_OP_COURSE_VIEW이(가) 생성되었습니다.



--○ 교수 계정에서 자신이 강의한 과목의 성적 출력 (PROF_SCORE_VIEW)
CREATE OR REPLACE VIEW PROF_SCORE_VIEW
AS
SELECT SJ.SJ_NAME "과목명", OPS.START_DATE "과목시작일",OPS.END_DATE "과목종료일"
    , B.B_NAME "교재명"
    , S.S_NAME "학생명"
    , SC.A_SCORE "출결점수", SC.P_SCORE "실기점수", SC.W_SCORE "필기점수"
    , (SC.A_SCORE + SC.P_SCORE + SC.W_SCORE) "총점"
    , RANK()OVER(PARTITION BY SJ.SJ_NAME ORDER BY (SC.A_SCORE + SC.P_SCORE + SC.W_SCORE) DESC) "등수"
    , P.P_NAME "교수명"
    , CASE WHEN D.D_CODE IS NOT NULL 
            THEN CONCAT('중도탈락 - ',TO_CHAR(D.D_CODE))
            ELSE NULL
       END "중도탈락여부"
FROM TBL_STUDENT S, TBL_SUGANG SG, TBL_COURSE C, TBL_OP_COURSE OPC, TBL_PROFESSOR P
    , TBL_SUBJECT SJ, TBL_OP_SUBJECT OPS, TBL_SCORE SC, TBL_DROP D, TBL_BOOK B
WHERE S.S_CODE = SG.S_CODE(+)        -- STUDENT, SUGANG
  AND SG.OPC_CODE = OPC.OPC_CODE(+)  -- SUGANG, OP_COURSE
  AND OPC.OPC_CODE = OPS.OPC_CODE(+) -- OP_COURSE, OP_SUBJECT
  AND OPS.OPS_CODE = SC.OPS_CODE(+)  -- OP_SUBJECT, SCORE
  AND OPC.C_CODE = C.C_CODE(+)        -- OP_COURSE, COURSE
  AND OPS.SJ_CODE = SJ.SJ_CODE(+)     -- OP_SUBJECT, SUBJECT
  AND D.SG_CODE(+) = SG.SG_CODE       -- DROP, SUGANG
  AND OPS.B_CODE = B.B_CODE(+)        -- OP_SUBJECT, BOOK
  AND OPS.P_CODE = P.P_CODE(+)       -- OP_SUBJECT, PROFESSOR
  AND SG.SG_CODE = SC.SG_CODE;        -- SCORE, SUGANG


--○ 교수 계정에서 담당과목 날짜 상관 없이 모두 조회
CREATE OR REPLACE VIEW PROF_SUBJECT_ALL_VIEW
AS
SELECT SJ.SJ_NAME "과목명"
        , OPS.START_DATE "과목시작일"
        , OPS.END_DATE "과목종료일"
        , P.P_NAME "교수이름"
FROM TBL_OP_SUBJECT OPS,TBL_SUBJECT SJ, TBL_PROFESSOR P
WHERE OPS.SJ_CODE = SJ.SJ_CODE(+)      
  AND OPS.P_CODE = P.P_CODE(+);
--==> View PROF_SUBJECT_ALL_VIEW이(가) 생성되었습니다.
  
  
--○ 교수 계정에서 성적 입력 화면 전, 현재 진행 중인 담당과목 조회
CREATE OR REPLACE VIEW PROF_SUBJECT_VIEW
AS
SELECT SJ.SJ_NAME "과목명"
        , OPS.START_DATE "과목시작일"
        , OPS.END_DATE "과목종료일"
        , P.P_NAME "교수이름"
FROM TBL_OP_SUBJECT OPS,TBL_SUBJECT SJ, TBL_PROFESSOR P
WHERE OPS.SJ_CODE = SJ.SJ_CODE(+)      
  AND OPS.P_CODE = P.P_CODE(+)
  AND OPS.START_DATE <= SYSDATE        -- 강의 예정인 과목 미출력
  AND SYSDATE < OPS.START_DATE+(OPS.END_DATE-OPS.START_DATE+10); -- 강의 종료후 10일 이내만 성적처리 가능하도록 과목출력
  


--○ 교수 계정에서 성적 입력 시 중도탈락된 학생은 제외하고 볼 수 있는 뷰
CREATE OR REPLACE VIEW PROF_SCORE_INSERT_VIEW
AS
SELECT SJ.SJ_NAME "과목명", OPS.START_DATE "과목시작일",OPS.END_DATE "과목종료일"
    , B.B_NAME "교재명", SD.S_NAME "학생명"
    , P.P_NAME "교수명", SG.SG_CODE "수강코드"
FROM TBL_OP_SUBJECT OPS,TBL_SUBJECT SJ, TBL_SUGANG SG, TBL_STUDENT SD
    , TBL_OP_COURSE OPC,  TBL_BOOK B, TBL_PROFESSOR P, TBL_DROP D
WHERE OPS.OPC_CODE = OPC.OPC_CODE(+)   -- OP_COURSE, OP_SUBJECT
  AND OPC.OPC_CODE = SG.OPC_CODE(+)    -- SUGANG, OP_COURSE
  AND SG.S_CODE  = SD.S_CODE (+)       -- SUGANG, STUDENT
  AND OPS.SJ_CODE = SJ.SJ_CODE(+)      -- OP_SUBJECT, SUBJECT
  AND OPS.B_CODE = B.B_CODE(+)         -- OP_SUBJECT, BOOK
  AND OPS.P_CODE = P.P_CODE(+)        -- PROFESSOR, OP_SUBJECT
  AND SG.SG_CODE = D.SG_CODE(+)       -- DROP, SUGANG
  AND D.D_CODE IS NULL                 -- 중도탈락 테이블에 입력된 학생이면 출력 되지 않도록
  AND SD.S_NAME IS NOT NULL;           -- 삭제된 학생 출력되지 않도록
--==>> View PROF_SCORE_INSERT_VIEW이(가) 생성되었습니다.



--○ 학생 계정에서 자신이 수강 완료한 과목 성적 확인 (STU_SCORE_VIEW)
CREATE OR REPLACE VIEW STU_SCORE_VIEW
AS
SELECT SJ.SJ_NAME "과목명", OPS.START_DATE "과목시작일",OPS.END_DATE "과목종료일"
    , B.B_NAME "교재명"
    , S.S_NAME "학생명"
    , SC.A_SCORE "출결점수", SC.P_SCORE "실기점수", SC.W_SCORE "필기점수"
    , (SC.A_SCORE + SC.P_SCORE + SC.W_SCORE) "총점"
    , RANK()OVER(PARTITION BY SJ.SJ_NAME ORDER BY (SC.A_SCORE + SC.P_SCORE + SC.W_SCORE) DESC) "등수"
    , P.P_NAME "교수명"
    , CASE WHEN D.D_CODE IS NOT NULL 
            THEN CONCAT('중도탈락 - ',TO_CHAR(D.D_CODE))
            ELSE NULL
       END "중도탈락여부"
FROM TBL_STUDENT S, TBL_SUGANG SG, TBL_COURSE C, TBL_OP_COURSE OPC, TBL_PROFESSOR P
    , TBL_SUBJECT SJ, TBL_OP_SUBJECT OPS, TBL_SCORE SC, TBL_DROP D, TBL_BOOK B
WHERE S.S_CODE = SG.S_CODE(+)        -- STUDENT, SUGANG
  AND SG.OPC_CODE = OPC.OPC_CODE(+)  -- SUGANG, OP_COURSE
  AND OPC.OPC_CODE = OPS.OPC_CODE(+) -- OP_COURSE, OP_SUBJECT
  AND OPS.OPS_CODE = SC.OPS_CODE(+)  -- OP_SUBJECT, SCORE
  AND OPC.C_CODE = C.C_CODE(+)        -- OP_COURSE, COURSE
  AND OPS.SJ_CODE = SJ.SJ_CODE(+)     -- OP_SUBJECT, SUBJECT
  AND D.SG_CODE(+) = SG.SG_CODE       -- DROP, SUGANG
  AND OPS.B_CODE = B.B_CODE(+)        -- OP_SUBJECT, BOOK
  AND OPS.P_CODE = P.P_CODE(+)       -- OP_SUBJECT, PROFESSOR
  AND SG.SG_CODE = SC.SG_CODE;        -- SCORE, SUGANG
--==>> View STU_SCORE_VIEW이(가) 생성되었습니다.


