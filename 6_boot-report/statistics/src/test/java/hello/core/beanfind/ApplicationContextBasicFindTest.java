package hello.core.beanfind;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.sun.javafx.collections.MappingChange.Map;

import hello.core.member.MemberRepository;
import hello.core.member.MemoryMemberRepository;

public class ApplicationContextBasicFindTest {
	AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(SameBeanConfig.class);

	@Test
	@DisplayName("타입으로 조회시 같은 타입이 둘 이상 있으면, 중복 오류가 발생한다.")
	void findBeanByTypeDuplicate() {
		MemberRepository bean = ac.getBean(MemberRepository.class);
		assertThrows(NoUniqueBeanDefinitionException.class,
				() -> ac.getBean(MemberRepository.class));
	}
	
	@Test
	@DisplayName("타입으로 조회시 같은 타입이 둘 이상 있으면, 빈 이름을 지정하면 된다.")
	void findBeanByName () {
		MemberRepository memberRepository = ac.getBean("memberRepository1", MemberRepository.class);
		assertThat(memberRepository).isInstanceOf(MemberRepository.class);
	}
	
	@Test
	@DisplayName("특정타입을 모두 조회하기")
	void findAllBeanByType() {
		Map<String, MemberRepository> beansOfType =(Map<String, MemberRepository>) ac.getBeansOfType(MemberRepository.class);
		for(String key : ((java.util.Map<String, MemberRepository>) beansOfType).keySet()) {
			System.out.println("key = " + key + " value = " + ((java.util.Map<String, MemberRepository>) beansOfType).get(key));
		}
		System.out.println("beansOfType = "  +beansOfType);
		assertThat(((java.util.Map<String, MemberRepository>) beansOfType).size()).isEqualTo(2);
	}
	
	
	
	@Configuration
	static class SameBeanConfig {//중첩클래스 - static : 스코프를 이 안에서만 하겠다.
		@Bean
		public MemberRepository memberRepository1 () {
			return new MemoryMemberRepository();
		}

		@Bean
		public MemberRepository memberRepository2 () {
			return new MemoryMemberRepository();
		}

	}
	
	
	
	
}
